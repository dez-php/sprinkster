(function($){
	window.resultInfiniteScroll = function(data) {}
	$.fn.infscrollDef = {
		url: '',
		callback: 'resultInfiniteScroll',
		offset: $(window).height(),
		onLoad: null,
		onComplete: null,
		onSuccess: null,
		onLoadPage: null,
		loading: {
			finished: undefined,
			finishedMsg: "<em>Congratulations, you've reached the end of the internet.</em>",
			img: "assets/images/loaders/spinning-loader.svg",
			msg: null,
			msgText: "<em>Loading the next set of posts...</em>",
			selector: null,
			speed: 'fast',
			start: undefined
		},
		data : {},
		type : 'GET',
		loadingAppendTo: null,
		load_more: null,
		smartscroll: window
	}
	$.fn.infscroll = function(options) {
        var loaded = false,
        	holder = this,
        	$holder = $(this),
        	selector = this.selector,
        	page = 1;
		
		holder.infscrollPause = false;
		
		if(options == 'destroy') {
			if($holder.data('jsp')) {
				$holder.unbind('jsp-scroll-y.infscroll');
			} else {
				opt = $holder.data('infscroll_options');
				$(opt && opt.smartscroll ? opt.smartscroll : window).unbind('smartscroll.infscroll');
			}
			return this;
		}
		
		if(options == 'pause') {
			holder.infscrollPause = true;
			return this;
		}
		
		if(options == 'resume') {
			holder.infscrollPause = false;
			return this;
		} 

		options = $.extend({},$.fn.infscrollDef,options);
		
		if(options.loadingAppendTo) {
			options.loading.selector = options.loadingAppendTo || options.loading.selector || holder
		} else {
			options.loading.selector = options.loading.selector || holder;
		}
                
		options.loading.msg = $('<div id="infscr-loading"><img width="32" alt="Loading..." src="' + options.loading.img + '" /><div>' + options.loading.msgText + '</div></div>');
                
        // Preload loading.img
        (new Image()).src = options.loading.img;
        
        // determine loading.start actions
        options.loading.start = options.loading.start || function() {
			if(options.loading && options.loading.selector && options.loading.selector[0] && (options.loading.selector[0].tagName || options.loading.selector[0].nodeName) == 'UL') {
				$appendTo = options.loading.selector.parent();
			} else {
				$appendTo = options.loading.selector;
			}
                        
			options.loading.msg
				.appendTo($appendTo)
				.show(options.loading.speed, function () {
	            	//beginAjax(opts);
				});
		};
		
		// determine loading.finished actions
		options.loading.finished = options.loading.finished || function() {
			options.loading.msg.fadeOut('normal');
			return true;
		};
		
		if(options.onLoadPage) {
			(options.onLoad || options.loading.start).call(this);
			loaded = true;
			data_url_onLoadPage = options.onLoadPage;
			if($.isFunction(options.onLoadPage)) {
				data_url_onLoadPage = options.onLoadPage.call(this);
			}
			url_onLoadPage = data_url_onLoadPage + (data_url_onLoadPage.indexOf('?')>-1?"&":"?") +"RSP=ajax&infscr=true&page=" + page;
			ajx = $.ajax({
				url:url_onLoadPage,
				type:options.type,
				dataType: "jsonp",
				data: options.data,
				cache: true,
				jsonpCallback: options.callback,
				complete: function(response) {
					loaded = false;
					(options.onComplete || options.loading.finished).call(holder,response);
				},
				success: function(response){
					loaded = false;
					(options.onSuccess || options.loading.finished).call(holder,response);
					page++;
				}
			});
		}
		
		holder.doScroll = function() {
			
			if($.isFunction(options.offset)) {
				offset = options.offset.call(this);
			} else {
				offset = options.offset;
			} 
			
			var load_more = ($(options.smartscroll).scrollTop() + (( $(options.smartscroll).height() * 2 )+offset)) > (holder.outerHeight() + holder.offset().top);
			
			if(options.load_more && $.isFunction(options.load_more))
				load_more = options.load_more.call(this);
			
			if( !holder.infscrollPause && load_more && !loaded ) {
				loaded = true;
				
				data_url = options.url;
				if($.isFunction(options.url)) {
					data_url = options.url.call(this);
				}
				
				if(!data_url) {
					if($holder.data('jsp')) {
						$holder.unbind('jsp-scroll-y.infscroll');
					} else {
						$(options.smartscroll).unbind('smartscroll.infscroll');
					}
					holder.infscrollPause = true;
					return this;
				}
				
				(options.onLoad || options.loading.start).call(this);
				
				url = data_url + (data_url.indexOf('?')>-1?"&":"?") +"RSP=ajax&infscr=true&page=" + page;
				if($.isFunction(options.data)) {
					options.data = options.data.call(this);
				} 
				
				ajx = $.ajax({
					url:url,
					type:options.type,
					dataType: "jsonp",
					data: options.data,
					cache: true,
					jsonpCallback: options.callback,
					complete: function(response) {
						loaded = false;
						(options.onComplete || options.loading.finished).call(holder,response);
					},
					success: function(response){
						loaded = false;
						(options.onSuccess || options.loading.finished).call(holder,response);
						page++;
					}
				});
				
				
				
			}
		};
		
		$holder.data('infscroll_options', options);
		
		if( $holder.size() > 0 ) {
			if($holder.data('jsp')) {
				$holder.bind('jsp-scroll-y.infscroll', holder.doScroll);
			} else {
				$(options.smartscroll).bind('smartscroll.infscroll',holder.doScroll);
			}
		};
		return $holder;
	};
	
	var scrollTimeout;
	$.event.special.smartscroll = {
	    setup: function () {
	        $(this).bind("scroll", $.event.special.smartscroll.handler);
	    },
	    teardown: function () {
	        $(this).unbind("scroll", $.event.special.smartscroll.handler);
	    },
	    handler: function (event, execAsap) {
	        var context = this,
		      args = arguments;
	
	        event.type = "smartscroll";
	
	        if (scrollTimeout) { clearTimeout(scrollTimeout); }
	        scrollTimeout = setTimeout(function () {
	            $.event.dispatch.apply(context, args);
	        }, execAsap === "execAsap" ? 0 : 100);
	    }
	};
	
	$.fn.smartscroll = function (fn) {
	    return fn ? this.bind("smartscroll", fn) : this.trigger("smartscroll", ["execAsap"]);
	};
	

	
})(jQuery);